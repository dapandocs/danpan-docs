# Provider 依赖注入

- [原文地址--全栈小册](https://skillgroup.cn/framework/nestjs/provider.html)：https://skillgroup.cn/framework/nestjs/provider.html

在 NestJS 中，可以使用 Provider 来进行依赖注入。Provider 是一个可被注入到其他类中的可重用对象。

### 基础用法

::: code-group

```ts [user.service.ts]
// user.service.ts
import { Injectable } from "@nestjs/common";

@Injectable()
export class UserService {
  async getUser() {
    return [
      {
        id: 1,
        name: "John Doe",
        email: "john@doe.com",
        password: "123456",
        createdAt: "2020-01-01",
        updatedAt: "2020-01-01",
      },
    ];
  }
}
```

```ts [user.controller.ts]
// user.controller.ts
import { Controller, Get } from "@nestjs/common";
import { UserService } from "./user.service";

@Controller("user")
export class UserController {
  // 构造器注入
  constructor(private readonly userService: UserService) {}

  @Get("list")
  async getUser() {
    return await this.userService.getUser();
  }
}
```

```ts [user.module.ts]
// user.module.ts
import { Module } from "@nestjs/common";
import { UserService } from "./user.service";
import { UserController } from "./user.controller";

@Module({
  controllers: [UserController],
  // 简写用法
  providers: [UserService],
})
export class UserModule {}
```

:::

在上面的示例中，UserService 通过`@Injectable`成为可被注入的类，UserController 类依赖于 UserService 类。通过将 UserService 类作为参数传递给 UserController 类的构造函数，NestJS 会自动解析并注入 UserService 实例。

#### 1、@Inject 手动注入

上述是通过构造器注入的方式，也可以通过 `@Inject` 装饰器手动注入。

```ts
import { Controller, Get, Inject } from '@nestjs/common';
import { UserService } from './user.service';

@Controller('user')
export class UserController {

  // @Inject 手动注入
  constructor(@Inject(UserService) private readonly userService: UserService) {}

  @Get('list')
  async getUser() {
    return await this.userService.getUser();
  }
}
```

#### 2、provider 注入的完整形式

其中 `providers: [UserService]`，是一种简写形式，完整的写法如下：

**provide 为类名，useClass 为类**

```ts
@Module({
  controllers: [UserController],
  providers: [
    {
      provide: UserService, // 指定注入的token，也就是给类命名，默认是类名首字母小写
      useClass: UserService, // 指定注入的类
    },
  ],
})
class UserModule {}
```

**provide 为字符串，useClass 为类**

```ts
@Module({
  controllers: [UserController],
  providers: [
    {
      provide: 'user',
      useClass: UserService,
    },
  ],
})
export class UserModule {}
```
需要注意的是，provide 指定的字符串，在注入时需要使用 @Inject('user') 注入。

```ts
 constructor(@Inject('user') private readonly userService: UserService) {}
```
