import{_ as o,a as e}from"./chunks/CopyRight.vue_vue_type_script_setup_true_lang.67549825.js";import{_ as r,C as c,o as t,c as y,H as s,w as a,Q as E}from"./chunks/framework.27021b64.js";const h=JSON.parse('{"title":"JS逆向：由 words 、sigBytes 引发的一系列思考与实践","description":"","frontmatter":{},"headers":[],"relativePath":"reverse/basic/word-array.md","filePath":"reverse/basic/word-array.md","lastUpdated":1719306912000}'),i={name:"reverse/basic/word-array.md"},F=E(`<h1 id="js逆向-由-words-、sigbytes-引发的一系列思考与实践" tabindex="-1">JS逆向：由 words 、sigBytes 引发的一系列思考与实践 <a class="header-anchor" href="#js逆向-由-words-、sigbytes-引发的一系列思考与实践" aria-label="Permalink to &quot;JS逆向：由 words 、sigBytes 引发的一系列思考与实践&quot;">​</a></h1><blockquote><p>【作者主页】：<a href="https://blog.csdn.net/studypy1024" target="_blank" rel="noreferrer">小鱼神1024</a></p><p>【擅长领域】：JS逆向、小程序逆向、AST还原、验证码突防、Python开发、浏览器插件开发、React前端开发、NestJS后端开发等等</p></blockquote><p>在做JS逆向时，你是否经常看到 <code>words</code> 和 <code>sigBytes</code> 这两个属性呢，比如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">words</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">2003644449</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1081552243</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">594308145</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1718382376</span><span style="color:#E1E4E8;">], </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">sigBytes</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">16</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">words</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">2003644449</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1081552243</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">594308145</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1718382376</span><span style="color:#24292E;">], </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">sigBytes</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果发现了它们的踪迹，那恭喜你了。基本可以确定，网站是使用 <code>crypto-js</code> 库中某一个加密算法实现加密的。</p><h3 id="words-、sigbytes-它们是什么" tabindex="-1">words 、sigBytes 它们是什么 <a class="header-anchor" href="#words-、sigbytes-它们是什么" aria-label="Permalink to &quot;words 、sigBytes 它们是什么&quot;">​</a></h3><p>在 <code>crypto-js</code> 这个流行的 <code>JavaScript</code> 加密库中，<code>words</code> 和 <code>sigBytes</code> 是 <code>CryptoJS.lib.WordArray</code> 对象的两个重要属性。</p><p><code>words</code> 数组是 <code>WordArray</code> 对象的主体，它用于存储加密数据。在 crypto-js 中，一个 <code>word</code> 是由32位（或者说是4个字节）组成的，因此每个元素在 words 数组中实际上可以表示4个字节的数据。</p><p>在计算机系统中，一个32位的整数可以存储从-2,147,483,648到2,147,483,647的整数值（如果是有符号整数），或者从0到4,294,967,295（如果是无符号整数）。这种表示范围是因为32位可以表示2^32（即4,294,967,296）个不同的值。</p><blockquote><p><strong>补充</strong></p><p>在计算机和信息技术中，32位（4字节）是一个常用的数据大小单位，用来表示数据的存储或处理容量。具体来讲：</p><ul><li>1位（bit）：是计算机数据的最基本单位，代表一个二进制数字，即0或1。</li><li>1字节（Byte）：通常由8位组成，是基本的数据存储单位。1字节可以表示0到255（或者在二进制中是00000000到11111111）之间的一个数值。</li><li>32位：则相当于4字节（4 Bytes），因为1字节是8位，所以4字节就是4 * 8 = 32位。</li></ul></blockquote><h3 id="如何生成-wordarray-对象" tabindex="-1">如何生成 WordArray 对象 <a class="header-anchor" href="#如何生成-wordarray-对象" aria-label="Permalink to &quot;如何生成 WordArray 对象&quot;">​</a></h3><p>两种解决办法：</p><h4 id="通过-cryptojs-enc-utf8-parse-生成" tabindex="-1">通过 CryptoJS.enc.Utf8.parse 生成 <a class="header-anchor" href="#通过-cryptojs-enc-utf8-parse-生成" aria-label="Permalink to &quot;通过 CryptoJS.enc.Utf8.parse 生成&quot;">​</a></h4><p>如果已知utf8编码的明文，则可以使用 <code>CryptoJS.enc.Utf8.parse</code> 方法生成 <code>WordArray</code> 对象。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CryptoJS</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;crypto-js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 生成 WordArray 对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">keyWordArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptoJS.enc.Utf8.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;wm0!@w-s#ll1flo(&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(keyWordArray);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CryptoJS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;crypto-js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 生成 WordArray 对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">keyWordArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptoJS.enc.Utf8.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wm0!@w-s#ll1flo(&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(keyWordArray);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="通过-cryptojs-lib-wordarray-create-生成" tabindex="-1">通过 CryptoJS.lib.WordArray.create 生成 <a class="header-anchor" href="#通过-cryptojs-lib-wordarray-create-生成" aria-label="Permalink to &quot;通过 CryptoJS.lib.WordArray.create 生成&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CryptoJS</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;crypto-js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">words</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">2003644449</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1081552243</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">594308145</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1718382376</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// 32位整数数组（words数组）</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sigBytes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 CryptoJS 转换字节数组到 WordArray</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">keyWordArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptoJS.lib.WordArray.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(words, sigBytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(keyWordArray);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CryptoJS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;crypto-js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">words</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">2003644449</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1081552243</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">594308145</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1718382376</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 32位整数数组（words数组）</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sigBytes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 CryptoJS 转换字节数组到 WordArray</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">keyWordArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptoJS.lib.WordArray.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(words, sigBytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(keyWordArray);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="如何将-wordarray-转化为-utf-8-字符串" tabindex="-1">如何将 WordArray 转化为 UTF-8 字符串 <a class="header-anchor" href="#如何将-wordarray-转化为-utf-8-字符串" aria-label="Permalink to &quot;如何将 WordArray 转化为 UTF-8 字符串&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CryptoJS</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;crypto-js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">wordArrayBytes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    words: [ </span><span style="color:#79B8FF;">2003644449</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1081552243</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">594308145</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1718382376</span><span style="color:#E1E4E8;"> ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    sigBytes: </span><span style="color:#79B8FF;">16</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将 WordArray 转换为 UTF-8 字符串</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptoJS.enc.Utf8.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(wordArrayBytes);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wm0!@w-s#ll1flo(</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CryptoJS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;crypto-js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">wordArrayBytes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    words: [ </span><span style="color:#005CC5;">2003644449</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1081552243</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">594308145</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1718382376</span><span style="color:#24292E;"> ],</span></span>
<span class="line"><span style="color:#24292E;">    sigBytes: </span><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将 WordArray 转换为 UTF-8 字符串</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptoJS.enc.Utf8.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(wordArrayBytes);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wm0!@w-s#ll1flo(</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="如何将-wordarray-转化为十六进制hex" tabindex="-1">如何将 WordArray 转化为十六进制Hex <a class="header-anchor" href="#如何将-wordarray-转化为十六进制hex" aria-label="Permalink to &quot;如何将 WordArray 转化为十六进制Hex&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CryptoJS</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;crypto-js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">wordArrayBytes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    words: [ </span><span style="color:#79B8FF;">2003644449</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1081552243</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">594308145</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1718382376</span><span style="color:#E1E4E8;"> ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    sigBytes: </span><span style="color:#79B8FF;">16</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将 WordArray 转换为十六进制Hex</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptoJS.enc.Hex.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(wordArrayBytes);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 776d302140772d73236c6c31666c6f28</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CryptoJS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;crypto-js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">wordArrayBytes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    words: [ </span><span style="color:#005CC5;">2003644449</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1081552243</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">594308145</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1718382376</span><span style="color:#24292E;"> ],</span></span>
<span class="line"><span style="color:#24292E;">    sigBytes: </span><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将 WordArray 转换为十六进制Hex</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptoJS.enc.Hex.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(wordArrayBytes);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 776d302140772d73236c6c31666c6f28</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>那如何判断一个字符串是否为有效的十六进制字符串，可以检查以下几点：</p><ul><li><p><strong>字符串长度</strong>：十六进制字符串的长度应该是偶数。</p></li><li><p><strong>字符范围</strong>：十六进制字符串只能包含 0-9 以及 a-f 和 A-F 这些字符。</p></li></ul><p>可以编写一个函数来实现这个逻辑：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 判断一个字符串是否为十六进制字符串的函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isHexString</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查长度是否为偶数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (str.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用正则表达式检查字符串是否只包含合法的十六进制字符（0-9, a-f, A-f）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hexRegex</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">[0-9a-fA-F]</span><span style="color:#F97583;">+$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> hexRegex.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 示例测试</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">testHexString1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;776d302140772d73236c6c31666c6f28&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">testHexString2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1a2b3g4d5e&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 包含非法字符 &#39;g&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">testHexString3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">;        </span><span style="color:#6A737D;">// 长度为奇数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isHexString</span><span style="color:#E1E4E8;">(testHexString1)); </span><span style="color:#6A737D;">// 输出：true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isHexString</span><span style="color:#E1E4E8;">(testHexString2)); </span><span style="color:#6A737D;">// 输出：false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isHexString</span><span style="color:#E1E4E8;">(testHexString3)); </span><span style="color:#6A737D;">// 输出：false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 判断一个字符串是否为十六进制字符串的函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isHexString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查长度是否为偶数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (str.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用正则表达式检查字符串是否只包含合法的十六进制字符（0-9, a-f, A-f）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hexRegex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">[0-9a-fA-F]</span><span style="color:#D73A49;">+$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> hexRegex.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 示例测试</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">testHexString1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;776d302140772d73236c6c31666c6f28&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">testHexString2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1a2b3g4d5e&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 包含非法字符 &#39;g&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">testHexString3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">;        </span><span style="color:#6A737D;">// 长度为奇数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isHexString</span><span style="color:#24292E;">(testHexString1)); </span><span style="color:#6A737D;">// 输出：true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isHexString</span><span style="color:#24292E;">(testHexString2)); </span><span style="color:#6A737D;">// 输出：false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isHexString</span><span style="color:#24292E;">(testHexString3)); </span><span style="color:#6A737D;">// 输出：false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="wordarray整数数组、hex十六进制、bytearray字节数组、utf-8字符串之间的相互转换" tabindex="-1">WordArray整数数组、Hex十六进制、ByteArray字节数组、UTF-8字符串之间的相互转换 <a class="header-anchor" href="#wordarray整数数组、hex十六进制、bytearray字节数组、utf-8字符串之间的相互转换" aria-label="Permalink to &quot;WordArray整数数组、Hex十六进制、ByteArray字节数组、UTF-8字符串之间的相互转换&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 判断一个数组是否为字节数组（每个元素为0到255之间的整数）</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isByteArray</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 首先检查是否为数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(arr)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查每个元素是否为0到255之间的整数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> arr[i] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> arr[i] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> arr[i] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(arr[i])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将字节数组转换为十六进制字符串的函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bytesToHex</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">bytes</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isByteArray</span><span style="color:#E1E4E8;">(bytes)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;输入必须是字节数组&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bytes.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">byte</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> byte.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将十六进制字符串转换为字节数组的函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hexToBytes</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">hex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; c </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> hex.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; c </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        bytes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(hex.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(c, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bytes;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将32位整数数组（words数组）转换为字节数组的函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wordsToBytes</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">words</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> words.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> word </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> words[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">        bytes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">((word </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xFF</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        bytes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">((word </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xFF</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        bytes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">((word </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xFF</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        bytes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(word </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xFF</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bytes;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将字节数组转换为UTF-8字符串的函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bytesToStringUTF8</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">bytes</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isByteArray</span><span style="color:#E1E4E8;">(bytes)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;输入必须是字节数组&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextDecoder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(bytes));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { words: [</span><span style="color:#79B8FF;">2003644449</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1081552243</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">594308145</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1718382376</span><span style="color:#E1E4E8;">], sigBytes: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将key的words数组转换为字节数组</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> keyBytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wordsToBytes</span><span style="color:#E1E4E8;">(key.words);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将字节数组转换为十六进制字符串，测试使用</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> keyHex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bytesToHex</span><span style="color:#E1E4E8;">(keyBytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 打印key和iv的十六进制字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;十六进制Hex:&quot;</span><span style="color:#E1E4E8;">, keyHex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将十六进制字符串还原为字节数组，以确保转换过程的无损失和准确性，测试使用</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> keyBytesFromHex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hexToBytes</span><span style="color:#E1E4E8;">(keyHex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将字节数组转换为UTF-8字符串，得到最终的字符串表示</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> keyString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bytesToStringUTF8</span><span style="color:#E1E4E8;">(keyBytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 打印key和iv的UTF-8字符串表示</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;字符串UTF-8:&quot;</span><span style="color:#E1E4E8;">, keyString);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 判断一个数组是否为字节数组（每个元素为0到255之间的整数）</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isByteArray</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 首先检查是否为数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(arr)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查每个元素是否为0到255之间的整数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> arr[i] </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> arr[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> arr[i] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">255</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(arr[i])) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将字节数组转换为十六进制字符串的函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bytesToHex</span><span style="color:#24292E;">(</span><span style="color:#E36209;">bytes</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isByteArray</span><span style="color:#24292E;">(bytes)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;输入必须是字节数组&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bytes.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">byte</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> byte.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将十六进制字符串转换为字节数组的函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hexToBytes</span><span style="color:#24292E;">(</span><span style="color:#E36209;">hex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; c </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> hex.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; c </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        bytes.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(hex.</span><span style="color:#6F42C1;">substr</span><span style="color:#24292E;">(c, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bytes;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将32位整数数组（words数组）转换为字节数组的函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wordsToBytes</span><span style="color:#24292E;">(</span><span style="color:#E36209;">words</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> words.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> word </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> words[i];</span></span>
<span class="line"><span style="color:#24292E;">        bytes.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">((word </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xFF</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        bytes.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">((word </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xFF</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        bytes.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">((word </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xFF</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        bytes.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(word </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xFF</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bytes;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将字节数组转换为UTF-8字符串的函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bytesToStringUTF8</span><span style="color:#24292E;">(</span><span style="color:#E36209;">bytes</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isByteArray</span><span style="color:#24292E;">(bytes)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;输入必须是字节数组&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextDecoder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(bytes));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { words: [</span><span style="color:#005CC5;">2003644449</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1081552243</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">594308145</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1718382376</span><span style="color:#24292E;">], sigBytes: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将key的words数组转换为字节数组</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> keyBytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wordsToBytes</span><span style="color:#24292E;">(key.words);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将字节数组转换为十六进制字符串，测试使用</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> keyHex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bytesToHex</span><span style="color:#24292E;">(keyBytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 打印key和iv的十六进制字符串</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;十六进制Hex:&quot;</span><span style="color:#24292E;">, keyHex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将十六进制字符串还原为字节数组，以确保转换过程的无损失和准确性，测试使用</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> keyBytesFromHex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hexToBytes</span><span style="color:#24292E;">(keyHex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将字节数组转换为UTF-8字符串，得到最终的字符串表示</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> keyString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bytesToStringUTF8</span><span style="color:#24292E;">(keyBytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 打印key和iv的UTF-8字符串表示</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;字符串UTF-8:&quot;</span><span style="color:#24292E;">, keyString);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div><h3 id="用-uint8array-生成字节数组" tabindex="-1">用 Uint8Array 生成字节数组 <a class="header-anchor" href="#用-uint8array-生成字节数组" aria-label="Permalink to &quot;用 Uint8Array 生成字节数组&quot;">​</a></h3><p>Uint8Array 的特点包括以下几点：</p><ul><li><p><strong>无符号整数</strong>：Uint8Array 存储的是无符号的 8 位整数（0 到 255），因此每个元素的取值范围是从 0 到 255。这意味着每个元素可以表示一个字节的数据，适用于处理字节数据和二进制数据。</p></li><li><p><strong>定长数组</strong>：Uint8Array 是一种定长数组，它的长度在创建时就已经确定，并且不能动态改变。这有助于提高操作效率和性能，尤其在处理大量数据时非常有用。</p></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 用 Uint8Array 生成字节数组</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint8Array</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Uint8Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">119</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">109</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">119</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">45</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">115</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">35</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">102</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">40</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 TextDecoder 将 bytes 转换为字符串</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">textDecoder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextDecoder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">decodedString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> textDecoder.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(uint8Array);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(decodedString);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wm0!@w-s#ll1flo(</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 用 Uint8Array 生成字节数组</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint8Array</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Uint8Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">119</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">109</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">33</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">64</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">119</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">45</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">115</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">35</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">108</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">108</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">102</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">108</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">40</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 TextDecoder 将 bytes 转换为字符串</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">textDecoder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextDecoder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">decodedString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> textDecoder.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(uint8Array);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(decodedString);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wm0!@w-s#ll1flo(</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="为什么-aes、des等加密时-要先转化-wrodarray" tabindex="-1">为什么 AES、DES等加密时，要先转化 WrodArray <a class="header-anchor" href="#为什么-aes、des等加密时-要先转化-wrodarray" aria-label="Permalink to &quot;为什么 AES、DES等加密时，要先转化 WrodArray&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AES 加密</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">word</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 转化为 WordArray</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iv</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptoJS.enc.Utf8.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0102030405060708&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 转化为 WordArray</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptoJS.enc.Utf8.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;wm0!@w-s#ll1flo(&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">encrypted</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptoJS.</span><span style="color:#79B8FF;">AES</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(word, key, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        iv,</span></span>
<span class="line"><span style="color:#E1E4E8;">        mode: CryptoJS.mode.</span><span style="color:#79B8FF;">CBC</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        padding: CryptoJS.pad.Pkcs7</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> encrypted.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AES 加密</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(</span><span style="color:#E36209;">word</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// 转化为 WordArray</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iv</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptoJS.enc.Utf8.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0102030405060708&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// 转化为 WordArray</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptoJS.enc.Utf8.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;wm0!@w-s#ll1flo(&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">encrypted</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptoJS.</span><span style="color:#005CC5;">AES</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(word, key, {</span></span>
<span class="line"><span style="color:#24292E;">        iv,</span></span>
<span class="line"><span style="color:#24292E;">        mode: CryptoJS.mode.</span><span style="color:#005CC5;">CBC</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        padding: CryptoJS.pad.Pkcs7</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> encrypted.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>转化为32位二进制数据再进行加密是出于以下几个主要原因：</p><ul><li><p><strong>加密算法的要求</strong>：几乎所有的现代加密算法，包括对称加密（如AES）和非对称加密（如RSA），在底层操作时都是以二进制数据形式工作的。这是因为加密算法在设计时需要操作位（bit）和字节（byte），而不是高级语言中的文本或数字等类型。因此，将数据转换为二进制形式是执行这些算法的必要步骤。</p></li><li><p><strong>安全性增强</strong>：通过转换为二进制数据，可以确保在加密过程中原始数据的内容不会因其格式或结构而泄露信息。此外，某些加密方式（如块加密）要求数据以特定大小的块来处理。将数据预先转化为二进制形式，可以更容易地按块对数据进行操作和填充。</p></li><li><p><strong>性能优化</strong>：直接对二进制数据进行操作比对高级数据类型（如字符串或对象）进行操作要有效率得多。加密和解密操作通常需要大量的数据处理工作，特别是在数据量大或需求高性能的应用场景中。预先将数据转换为二进制格式，可以最大限度地减少处理时间和资源消耗。</p></li></ul>`,35);function b(d,u,C,A,m,B){const l=o,n=c("ClientOnly"),p=e;return t(),y("div",null,[F,s(n,null,{default:a(()=>[s(l)]),_:1}),s(n,null,{default:a(()=>[s(p)]),_:1})])}const w=r(i,[["render",b]]);export{h as __pageData,w as default};
