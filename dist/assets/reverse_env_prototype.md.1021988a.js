import{_ as r,a as y}from"./chunks/CopyRight.vue_vue_type_script_setup_true_lang.67549825.js";import{_ as E,C as i,o as d,c as u,H as s,w as a,Q as e,k as o,a as p}from"./chunks/framework.27021b64.js";import{_ as F}from"./chunks/index.e5e15ed4.js";import"./chunks/CloseOutlined.9c3246b4.js";import"./chunks/isObjectLike.46b91259.js";import"./chunks/Serializer.fad5b415.js";import"./chunks/LeftOutlined.9040821c.js";import"./chunks/EyeOutlined.53cc40ff.js";const $=JSON.parse('{"title":"js补环境系列之剖析：原型、原型对象、实例对象三者互相转化（不讲废话、全是干货）","description":"","frontmatter":{},"headers":[],"relativePath":"reverse/env/prototype.md","filePath":"reverse/env/prototype.md","lastUpdated":null}'),b={name:"reverse/env/prototype.md"},C=e(`<h1 id="js补环境系列之剖析-原型、原型对象、实例对象三者互相转化-不讲废话、全是干货" tabindex="-1">js补环境系列之剖析：原型、原型对象、实例对象三者互相转化（不讲废话、全是干货） <a class="header-anchor" href="#js补环境系列之剖析-原型、原型对象、实例对象三者互相转化-不讲废话、全是干货" aria-label="Permalink to &quot;js补环境系列之剖析：原型、原型对象、实例对象三者互相转化（不讲废话、全是干货）&quot;">​</a></h1><p>思考下：js补环境中，什么场景会用到原型、原型对象、实例对象？</p><p>举例说明：</p><p>在js补环境中，大多数平台会用 <code>navigator</code> 中的 <code>userAgent</code> 作为 <code>环境检测点</code>。你是不是可能会这样补：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> window </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> navigator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    userAgent: </span><span style="color:#9ECBFF;">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">window.navigator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> navigator</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> window </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> navigator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    userAgent: </span><span style="color:#032F62;">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">window.navigator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> navigator</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果平台检测的是 <code>window.navigator.userAgent</code> 或者 <code>navigator.userAgent</code>，那么这样补环境是没问题的。</p><p>但是，如果平台通过 <code>Object.getOwnPropertyDescriptor(window.navigator, &quot;userAgent&quot;)</code> 获取对象属性描述符，那么这样补环境就出问题了。</p>`,7),h=o("p",null,[p("可以发现，在浏览器控制台中打印输出为："),o("code",null,"undefined"),p(" 。")],-1),g=e(`<p>可以发现，在 <code>Node</code> 环境下打印输出为：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;Mozilla/</span><span style="color:#79B8FF;">5.0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">(Windows</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">NT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.0</span><span style="color:#FDAEB7;font-style:italic;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">Win</span><span style="color:#79B8FF;">64</span><span style="color:#FDAEB7;font-style:italic;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">x</span><span style="color:#79B8FF;">64</span><span style="color:#FDAEB7;font-style:italic;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">AppleWebKit/</span><span style="color:#79B8FF;">537.36</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">(KHTML</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">like</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">Gecko)</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">Chrome/94.0.4606.81</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">Safari/537.36&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">writable</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">enumerable</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">configurable</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">value</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">&#39;Mozilla/</span><span style="color:#005CC5;">5.0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">(Windows</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">NT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.0</span><span style="color:#B31D28;font-style:italic;">;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">Win</span><span style="color:#005CC5;">64</span><span style="color:#B31D28;font-style:italic;">;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">x</span><span style="color:#005CC5;">64</span><span style="color:#B31D28;font-style:italic;">)</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">AppleWebKit/</span><span style="color:#005CC5;">537.36</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">(KHTML</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">like</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">Gecko)</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">Chrome/94.0.4606.81</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">Safari/537.36&#39;,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">writable</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">enumerable</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">configurable</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>很明显，浏览器和 <code>Node</code> 环境下得到的结果是不一样的。所以得到的加密结果也是不一样的。</p><p>那么，如何解决这个问题呢？</p><p>相信阅读完这篇文章后，你会有答案的。</p><p>为了方便理解，本文不会讲解太多基础概念，让人看的云里雾里的。我直接举例说明：</p><h3 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h3><p>定义一个用户 <code>原型</code>，它其实就是一个函数，首写字母大写。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;原型&quot;</span><span style="color:#E1E4E8;">, User)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果：[Function: User]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;原型&quot;</span><span style="color:#24292E;">, User)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果：[Function: User]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="原型对象" tabindex="-1">原型对象 <a class="header-anchor" href="#原型对象" aria-label="Permalink to &quot;原型对象&quot;">​</a></h3><p>可以通过 <code>prototype</code> 获取 <code>原型</code> 的 <code>原型对象</code>。</p><p>首先，我们来看下 <code>User</code> 函数的 <code>原型对象</code> 是什么。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;原型对象&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果：{ }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;原型对象&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果：{ }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>得到的是一个空对象，那是因为还没定义任何 <code>属性</code> 和 <code>方法</code>。</p><p>通过给 <code>User.prototype</code> 定义 <code>属性</code> 和 <code>方法</code>后，再次打印：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    username: </span><span style="color:#9ECBFF;">&quot;小鱼神1024&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    password: </span><span style="color:#9ECBFF;">&quot;12345678&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`用户名：\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">username</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\r\\n</span><span style="color:#9ECBFF;">密码：\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">password</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;原型对象&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果：{ username: &#39;小鱼神1024&#39;, password: &#39;12345678&#39;, login: [Getter] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    username: </span><span style="color:#032F62;">&quot;小鱼神1024&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    password: </span><span style="color:#032F62;">&quot;12345678&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`用户名：\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">username</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">密码：\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">password</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;原型对象&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果：{ username: &#39;小鱼神1024&#39;, password: &#39;12345678&#39;, login: [Getter] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="实例对象" tabindex="-1">实例对象 <a class="header-anchor" href="#实例对象" aria-label="Permalink to &quot;实例对象&quot;">​</a></h3><p>实例对象是通过 <code>new</code> 关键字创建的。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    username: </span><span style="color:#9ECBFF;">&quot;小鱼神1024&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    password: </span><span style="color:#9ECBFF;">&quot;12345678&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`用户名：\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">username</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\r\\n</span><span style="color:#9ECBFF;">密码：\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">password</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;实例对象&quot;</span><span style="color:#E1E4E8;">, user.</span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果：</span></span>
<span class="line"><span style="color:#6A737D;">// 用户名：小鱼神1024</span></span>
<span class="line"><span style="color:#6A737D;">// 密码：12345678</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    username: </span><span style="color:#032F62;">&quot;小鱼神1024&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    password: </span><span style="color:#032F62;">&quot;12345678&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`用户名：\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">username</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">密码：\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">password</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;实例对象&quot;</span><span style="color:#24292E;">, user.</span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果：</span></span>
<span class="line"><span style="color:#6A737D;">// 用户名：小鱼神1024</span></span>
<span class="line"><span style="color:#6A737D;">// 密码：12345678</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="原型、原型对象、实例对象三者互相转化" tabindex="-1">原型、原型对象、实例对象三者互相转化 <a class="header-anchor" href="#原型、原型对象、实例对象三者互相转化" aria-label="Permalink to &quot;原型、原型对象、实例对象三者互相转化&quot;">​</a></h3><h4 id="从原型到原型对象" tabindex="-1">从原型到原型对象 <a class="header-anchor" href="#从原型到原型对象" aria-label="Permalink to &quot;从原型到原型对象&quot;">​</a></h4><p>可以通过 <code>prototype</code> 获取 <code>原型</code> 的 <code>原型对象</code>。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;原型到原型对象&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;原型到原型对象&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="从原型对象到实例对象" tabindex="-1">从原型对象到实例对象 <a class="header-anchor" href="#从原型对象到实例对象" aria-label="Permalink to &quot;从原型对象到实例对象&quot;">​</a></h4><p>可以通过 <code>new</code> 关键字创建 <code>实例对象</code>。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;原型对象到实例对象&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;原型对象到实例对象&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="从原型对象到原型" tabindex="-1">从原型对象到原型 <a class="header-anchor" href="#从原型对象到原型" aria-label="Permalink to &quot;从原型对象到原型&quot;">​</a></h4><p>可以通过 <code>constructor</code> 获取 <code>原型对象</code> 的 <code>原型</code>。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;原型对象到原型&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;是否为原型&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> User)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;原型对象到原型&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是否为原型&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> User)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="从原型对象到实例对象-1" tabindex="-1">从原型对象到实例对象 <a class="header-anchor" href="#从原型对象到实例对象-1" aria-label="Permalink to &quot;从原型对象到实例对象&quot;">​</a></h4><p>可以先通过 <code>constructor</code> 获取 <code>原型对象</code> 的 <code>原型</code>，再通过 <code>new</code> 关键字创建 <code>实例对象</code>。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;原型对象到实例对象&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;原型对象到实例对象&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="从实例对象到原型对象" tabindex="-1">从实例对象到原型对象 <a class="header-anchor" href="#从实例对象到原型对象" aria-label="Permalink to &quot;从实例对象到原型对象&quot;">​</a></h4><p>先通过 <code>__proto__</code> 或者 <code>Object.getPrototypeOf</code> 获取 <code>实例对象</code> 的 <code>原型对象</code>。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;实例对象到原型对象1&quot;</span><span style="color:#E1E4E8;">, user.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;实例对象到原型对象2&quot;</span><span style="color:#E1E4E8;">, Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(user))</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;是否为原型对象&quot;</span><span style="color:#E1E4E8;">, user.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;是否为原型对象&quot;</span><span style="color:#E1E4E8;">, Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(user) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;实例对象到原型对象1&quot;</span><span style="color:#24292E;">, user.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;实例对象到原型对象2&quot;</span><span style="color:#24292E;">, Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(user))</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是否为原型对象&quot;</span><span style="color:#24292E;">, user.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是否为原型对象&quot;</span><span style="color:#24292E;">, Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(user) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="从实例对象到原型" tabindex="-1">从实例对象到原型 <a class="header-anchor" href="#从实例对象到原型" aria-label="Permalink to &quot;从实例对象到原型&quot;">​</a></h4><p>先通过 <code>__proto__</code> 或者 <code>Object.getPrototypeOf</code> 获取 <code>实例对象</code> 的 <code>原型对象</code>，再通过 <code>constructor</code> 获取 <code>原型对象</code> 的 <code>原型</code>。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;实例对象到原型1&quot;</span><span style="color:#E1E4E8;">, user.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;实例对象到原型2&quot;</span><span style="color:#E1E4E8;">, Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(user).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;是否为原型&quot;</span><span style="color:#E1E4E8;">, user.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> User)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;是否为原型&quot;</span><span style="color:#E1E4E8;">, Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(user).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> User)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;实例对象到原型1&quot;</span><span style="color:#24292E;">, user.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;实例对象到原型2&quot;</span><span style="color:#24292E;">, Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(user).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是否为原型&quot;</span><span style="color:#24292E;">, user.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> User)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是否为原型&quot;</span><span style="color:#24292E;">, Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(user).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> User)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>原型：<code>User</code>，是一个函数。</li><li>原型对象：<code>User.prototype</code>，通过 <code>prototype</code> 得到原型对象。</li><li>实例对象：<code>new User()</code>，通过 <code>new</code> 关键字得到实例对象。</li></ul><h3 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h3><p>阅读到这里，文章开头的问题能独立解决了吗?</p><p>我们一起分析一下吧！</p><p><code>navigator</code> 其实可以理解为 <code>实例对象</code>，<code>Navigator</code> 可以理解为 <code>原型</code>。</p><p><code>Object.getOwnPropertyDescriptor(window.navigator, &quot;userAgent&quot;)</code> 可以理解为：获取 <code>window.navigator</code> 的 <code>userAgent</code> 属性的描述符。</p><p>在浏览器中，它返回的是 <code>undefined</code>，但是通过 <code>navigator.userAgent</code> 又可以拿到值。说明 <code>userAgent</code> 不是 <code>window.navigator</code> 本身的属性，而是 <code>window.navigator</code> 的 <code>原型</code> 的属性。</p><p>所以，我们可以通过修改原型对象 <code>navigator.__proto__.userAgent</code> 来修改 <code>Navigator</code> 原型的值，从而间接修改 <code>navigator.userAgent</code> 的值。</p>`,47),m=o("p",null,"这样问题就解决了！",-1),v=o("p",null,"有任何问题欢迎留言讨论！或者加v讨论！",-1);function B(q,_,f,D,A,k){const l=F,n=i("ClientOnly"),t=r,c=y;return d(),u("div",null,[C,s(n,null,{default:a(()=>[s(l,{src:"/images/reverse/env/1.png",alt:"js补环境系列-原型、原型对象、实例对象"})]),_:1}),h,s(n,null,{default:a(()=>[s(l,{src:"/images/reverse/env/2.png",alt:"js补环境系列-原型、原型对象、实例对象"})]),_:1}),g,s(n,null,{default:a(()=>[s(l,{src:"/images/reverse/env/3.png",alt:"js补环境系列-原型、原型对象、实例对象"})]),_:1}),m,v,s(n,null,{default:a(()=>[s(t)]),_:1}),s(n,null,{default:a(()=>[s(c)]),_:1})])}const S=E(b,[["render",B]]);export{$ as __pageData,S as default};
